#!/bin/bash

source /etc/envvars

until curl -s $KUBERNETES_MASTER; do echo "Waiting for API Server..."; sleep 3; done;

export IP=`ip route get 1 | awk '{print $7;exit}'`
export ROLE=kubelet
export USER="system:node:$NODE_NAME"

mkdir -p /etc/kubernetes/manifests
HOST=`hostname -s`
KUBELET_OPTS="\
--hostname_override=$NODE_NAME \
--address=0.0.0.0 \
--cluster_dns=172.27.0.2 \
--cluster-domain=cluster.local \
--port=10250 \
--containerized=false \
--image-gc-high-threshold=50 \
--image-gc-low-threshold=30 \
--registry-qps=0 \
--hairpin-mode=hairpin-veth \
--serialize-image-pulls=false \
--node-labels=host=${HOST},${LABELS} \
--allow-privileged=true \
--pod-manifest-path=/etc/kubernetes/manifests \
--kube-reserved=cpu=500m,memory=20Mi \
--system-reserved=cpu=100m,memory=10Mi \
--kubeconfig=/etc/kubernetes/$ROLE-kubeconfig.yml \
--feature-gates=$FEATURE_GATES \
--register-with-taints=$TAINTS \
--logtostderr=true \
--v=2 \
"

mkdir -p /etc/kubernetes
kubectl config set-cluster kubernetes \
    --server=$KUBERNETES_MASTER \
    --kubeconfig=/etc/kubernetes/$ROLE-kubeconfig.yml
kubectl config set-context default \
    --cluster=kubernetes \
    --user=$USER \
    --kubeconfig=/etc/kubernetes/$ROLE-kubeconfig.yml
kubectl config use-context default --kubeconfig=/etc/kubernetes/$ROLE-kubeconfig.yml

#setup cgroups
for cgroup in /sys/fs/cgroup/*; do
  if [ -d $cgroup ]; then
    mkdir -p $cgroup/kubepods
  fi
done

exec 2>&1
exec kubelet ${KUBELET_OPTS}
